# Make sure the shell is interactive
case $- in
  *i*) ;;
  *) return ;;
esac

# set umask
umask 027

fastfetch

# Don't do anything if restricted, not even sourcing the ENV file; testing
# whether $- contains 'r' doesn't work, because Bash doesn't set that flag
# until after .bashrc has evaluated
! shopt -q restricted_shell 2>/dev/null || return

# Clear away all aliases; we do this here rather than in the $ENV file shared
# between POSIX shells, because ksh relies on aliases to implement certain
# POSIX utilities, like fc(1) and type(1)
unalias -a

# If ENV is set, source it to get all the POSIX-compatible interactive stuff;
# we should be able to do this even if we're running a truly ancient Bash
if [ -n "$ENV" ] ; then
    . "$ENV"
fi

# Ensure we're using at least version 3.0
# shellcheck disable=SC2128
[ -n "$BASH_VERSINFO" ] || return    # Check version array exists (>=2.0)
((BASH_VERSINFO[0] >= 3)) || return  # Check actual major version number

# Clear away command_not_found_handle if a system bashrc file set it up
unset -f command_not_found_handle

# Keep around 32K lines of history in file
HISTFILESIZE=$((1 << 15))

# Ignore duplicate commands
HISTCONTROL=ignoreboth

# Keep the times of the commands in history
HISTTIMEFORMAT='%F %T  '

# Use a more compact format for the `time` builtin's output
TIMEFORMAT='real:%lR user:%lU sys:%lS'

# Correct small errors in directory names given to the `cd` builtin
shopt -s cdspell
# Check that hashed commands still exist before running them
shopt -s checkhash
# Update LINES and COLUMNS after each command if necessary
shopt -s checkwinsize
# Put multi-line commands into one history entry
shopt -s cmdhist
# Include filenames with leading dots in pattern matching
shopt -s dotglob
# Enable extended globbing: !(foo), ?(bar|baz)...
shopt -s extglob
# Append history to $HISTFILE rather than overwriting it
shopt -s histappend
# If history expansion fails, reload the command to try again
shopt -s histreedit
# Load history expansion result as the next command, don't run them directly
shopt -s histverify
# Don't assume a word with a @ in it is a hostname
shopt -u hostcomplete
# Don't change newlines to semicolons in history
shopt -s lithist
# Don't try to tell me when my mail is read
shopt -u mailwarn
# Don't complete a Tab press on an empty line with every possible command
shopt -s no_empty_cmd_completion
# Use programmable completion, if available
shopt -s progcomp
# Warn me if I try to shift nonexistent values off an array
shopt -s shift_verbose
# Don't search $PATH to find files for the `source` builtin
shopt -u sourcepath

# These options only exist since Bash 4.0-alpha
if ((BASH_VERSINFO[0] >= 4)) ; then

  # Correct small errors in directory names during completion
  shopt -s dirspell
  # Allow double-star globs to match files and recursive paths
  shopt -s globstar

  # Warn me about stopped jobs when exiting
  # Available since 4.0, but only set it if >=4.1 due to bug:
  # <https://lists.gnu.org/archive/html/bug-bash/2009-02/msg00176.html>
  if ((BASH_VERSINFO[1] >= 1)) ; then
    shopt -s checkjobs
  fi

  # Expand variables in directory completion
  # Only available since 4.3
  if ((BASH_VERSINFO[1] >= 3)) ; then
    shopt -s direxpand
  fi
fi

# Load Bash-specific startup files
for bash in "$HOME"/.bashrc.d/*.bash ; do
  [[ -e $bash ]] || continue
  source "$bash"
done

# Load Bash completion file
if [[ -d "$HOME"/.bash_completion.d ]] ; then
  for completion in "$HOME"/.bash_completion.d/* ; do
    source "$completion"
  done
fi

# Load alias's
for alias in "${HOME}"/.alias.d/* ; do
  [ -e "${alias}" ] || continue
  source "${alias}"
done

# pyenv
#export PATH="/home/dabrown/.pyenv/bin:$PATH"
#eval "$(pyenv init -)"
#eval "$(pyenv virtualenv-init -)"
if [[ -x "$(command -v pyenv)" ]] ; then
  export PYENV_ROOT="/storage/dabrown/.pyenv"
  [[ -e "${PYENV_ROOT}/bin" ]] || path check "${PYENV_ROOT}/bin" || path insert "${PYENV_ROOT}/bin"
  [[ -e "${PYENV_ROOT}/shims" ]] || path check "${PYENV_ROOT}/shims" || eval "$(pyenv init -)"
  [[ -e "${PYENV_ROOT}/plugins/pyenv-virtualenv/shims" ]] || path check "${PYENV_ROOT}/plugins/pyenv-virtualenv/shims" || eval "$(pyenv virtualenv-init -)"
fi

# Set Environment variables
EDITOR="/usr/bin/nvim"

unset -v bash

source ${HOME}/.shrc

set -o vi

# BEGIN_KITTY_SHELL_INTEGRATION
if test -n "$KITTY_INSTALLATION_DIR" -a -e "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash"; then
  source "$KITTY_INSTALLATION_DIR/shell-integration/bash/kitty.bash";
fi
# END_KITTY_SHELL_INTEGRATION

# Setup keychain
if [ -f "${HOME}/.keychain/${HOSTNAME}-sh" ]; then
  source "${HOME}/.keychain/${HOSTNAME}-sh"
fi
eval $(keychain --eval --agents ssh id_ed25519)
# if ! $( ps -u ${LOGNAME} | grep -q ssh-agent ) ; then
#   /usr/bin/keychain --clear ${HOME}/.ssh/id_ed25519
#   source ${HOME}/.keychain/${HOSTNAME}-sh
# fi

# Start/configure starship if found in path
#if $(type -P starship > /dev/null) ; then
#    eval "$(starship init bash)"
#fi

# Setup oh-my-pohs
#export THEME=chips 
#agnoster  fish larserikfinholtmultiverse-neon nu4a powerlevel_classic rudolfs-dark unicorn
export THEME=powerlevel10k_classic

#eval "$(oh-my-posh init bash --config ${HOME}/.config/oh-my-posh/themes/${THEME}.omp.json)"
eval "$(oh-my-posh init bash --config /usr/share/oh-my-posh/themes/${THEME}.omp.json)"

## bash powerline
#source ~/.bash-powerline.sh

# add adb to path
if [ -d "${HOME}/adb-fastboot/platform-tools" ] ; then
  path insert "${HOME}/adb-fastboot/platform-tools"
fi
